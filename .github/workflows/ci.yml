name: CI Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [develop, main]

jobs:
  test-and-validate:
    name: Test and Validate
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-env: [development, staging, production]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint code
        run: |
          npx nx lint backend
          npx nx lint frontend
      
      - name: Run unit tests
        run: |
          npx nx test backend --coverage
          npx nx test frontend --coverage
      
      - name: Build with NODE_ENV=${{ matrix.node-env }}
        env:
          NODE_ENV: ${{ matrix.node-env }}
        run: |
          echo "Testing build with NODE_ENV=${{ matrix.node-env }}"
          npx nx build backend --configuration=production
          npx nx build frontend --configuration=production
      
      - name: Test environment validation
        env:
          NODE_ENV: ${{ matrix.node-env }}
          DATABASE_HOST: test-db
          DATABASE_PORT: 5432
          DATABASE_USER: test
          DATABASE_PASSWORD: test
          DATABASE_NAME: test_db
        run: |
          echo "Testing app startup with NODE_ENV=${{ matrix.node-env }}"
          timeout 10s node dist/apps/backend/main.js || EXIT_CODE=$?
          if [ "${EXIT_CODE:-0}" -ne 124 ]; then
            echo "App failed to start with NODE_ENV=${{ matrix.node-env }}"
            exit 1
          fi
          echo "✅ App started successfully with NODE_ENV=${{ matrix.node-env }}"

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test-and-validate
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build \
            -f infrastructure/docker/Dockerfile.prod \
            -t loan-system:test \
            .
      
      - name: Test container startup with staging environment
        run: |
          docker run -d \
            --name test-container \
            -e NODE_ENV=staging \
            -e DATABASE_HOST=localhost \
            -e DATABASE_PORT=5432 \
            -e DATABASE_USER=test \
            -e DATABASE_PASSWORD=test \
            -e DATABASE_NAME=test_db \
            loan-system:test
          
          sleep 5
          
          if docker ps | grep -q test-container; then
            echo "✅ Container started successfully"
            docker logs test-container
          else
            echo "❌ Container failed to start"
            docker logs test-container
            exit 1
          fi
          
          docker stop test-container || true
          docker rm test-container || true